{"version":3,"sources":["Components/Common/RightPanel.js","Images/Icons/down-arrow-ic.svg","Images/Icons/up-arrow-ic.svg","Components/Common/CollapsibleButton.js","Components/Common/cytoscapeStyle.js","Images/Icons/static_ic.svg","Images/Icons/ondemand_ic.svg","Images/Icons/connected_ic.svg","Images/Icons/no_tunnel_ic.svg","Images/Icons/successor_ic.svg","Images/Icons/longdistance_ic.svg","Images/Icons/not_reporting_ic.svg","Components/Common/OthersView.js","Images/Icons/ipop_ic.svg","Components/Common/Header.js","config.js","Components/Common/Overlays.js","Components/Common/Topology.js","Components/Common/OverlaysView.js","App.js","serviceWorker.js","index.js"],"names":["RightPanel","id","this","props","rightPanelTopic","children","React","Component","CollapsibleButton","handleOnClick","setState","prevState","isToggle","state","Accordion","className","style","Toggle","onClick","as","Button","color","background","border","outline","eventKey","name","textAlign","src","UpArrow","alt","DowmArrow","Collapse","Card","Body","backgroundColor","padding","cytoscapeStyle","selector","width","height","label","display","opacity","OthersView","renderNodeDetails","sourceNode","nodeDetails","connectedNodes","coordinate","raw_data","geo_coordinate","split","fetch","then","res","json","data","results","length","formatted_address","location","nodeContent","overflow","map","connectedNode","connectedNodeDetail","topology","getConnectedNodeDetails","MAC","type","stats","IceProperties","role","remoteAddress","localAddress","latency","byte_sent","total_byte_sent","byte_receive","total_byte_receive","e","ReactDOM","render","document","getElementById","renderLinkDetails","linkDetails","sourceNodeDetails","targetNodeDetails","srcCoordinate","tgtCoordinate","sourceLocation","targetLocation","sourceNodeColor","targetNodeColor","cy","elements","forEach","node","css","linkContent","paddingRight","marginBottom","margin","handleSwitch","State","remote_addr","local_addr","that","Promise","resolve","reject","switchToggle","swap","catch","getLinkDetails","currentSelectedElement","target","source","setNodeDetails","getNodeDetails","incomers","union","outgoers","filter","element","isNode","setLinkDetails","link","targetNode","renderGraph","currentView","cytoscape","maxZoom","initMaxZoom","minZoom","initMinZoom","zoom","center","selectedElement","relatedElement","notRelatedElement","difference","not","select","removeClass","addClass","isEdge","relatedElement2","notRelatedElement2","on","hidden","click","value","wheelSensitivity","getAlltopology","stylesheet","window","innerWidth","innerHeight","layout","defaultValue","onChange","handleViewSelector","elementFilter","group","toLowerCase","indexOf","text","handleRefresh","zoomIn","currentZoom","zoomOut","handleZoomSlider","parseFloat","handleWheel","handleSetMinZoom","min","setMinZoom","handleSetMaxZoom","max","handleBackToHome","confirm","reload","renderSubgraph","alert","renderTopology","handleMakerClicked","trigger","classList","add","midpoint","lat1","lng1","lat2","lng2","deg2rad","dlng","Bx","Math","cos","By","sin","lat3","atan2","sqrt","lng3","PI","degrees","hasCoordinate","renderMap","centerPoint","unmappedElement","bootstrapURLKeys","key","language","lat","lng","defaultZoom","bind","Header","console","log","setMaxZoom","graphElement","dataReady","refresh","infoToggle","configToggle","JSON","stringify","searchElement","selected","parse","labelKey","option","options","selectHintOnEnter","placeholder","renderMenuItemChildren","undefined","toArray","nodeMap","nodeRelatedElement","edgeMap","edgeRelatedElement","overlayName","OverlayTrigger","rootClose","placement","overlay","Popover","Title","Content","colSpan","connected_ic","longdistance_ic","not_reporting_ic","ondemand_ic","no_tunnel_ic","static_ic","successor_ic","handleInfoToggle","handleConfigToggle","step","onWheel","handleRightPanelToggle","ipop_ic","marginTop","config","ip","port","Overlays","overlays","overlayList","obj","overlayStr","OverlayId","numberOfNodes","NumNodes","numberOfLinks","NumEdges","push","getOverlayList","getOverlayName","overlaysName","getOverlay","find","getNumberOfNodes","getNumberOfLinks","getOverlayDescription","Topology","nodes","links","raw_nodes","raw_links","addNodeElement","getCoordinate","addLinkElement","linkColor","node_name","tap_name","mac","edge_type","ChannelProperties","tgt","connectedNodeDetails","Object","keys","TgtNodeID","OverlaysView","renderMainContent","selectedOverlay","renderGraphContent","Spinner","animation","variant","renderOverlaysContent","sticky","duration","interactive","position","arrow","open","html","selectOverlay","renderRightPanel","renderOverlayBtn","overlayId","intervalNo","Date","toISOString","allowOrigin","nodeURL","Config","linkURL","nodesJSON","linksJSON","sort","nodeID","linkID","url","App","Boolean","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a34376ee.chunk.js","sourcesContent":["import React from 'react'\n\nclass RightPanel extends React.Component {\n  render () {\n    return <section id=\"rightPanel\">\n      <h6>{this.props.rightPanelTopic}</h6>\n      <div id=\"rightPanelContent\">{this.props.children}</div>\n    </section>\n  }\n}\n\nexport default RightPanel\n","export default __webpack_public_path__ + \"static/media/down-arrow-ic.a48d0b4e.svg\";","export default __webpack_public_path__ + \"static/media/up-arrow-ic.279aab11.svg\";","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Button from 'react-bootstrap/Button'\nimport DowmArrow from '../../Images/Icons/down-arrow-ic.svg'\nimport UpArrow from '../../Images/Icons/up-arrow-ic.svg'\nclass CollapsibleButton extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isToggle: false\n    }\n  }\n\n  handleOnClick = () => {\n    this.setState(prevState => {\n      return { isToggle: !prevState.isToggle }\n    })\n  }\n\n  render() {\n    return (<Accordion id={this.props.id} className={this.props.className} style={this.props.style}>\n      <Accordion.Toggle onClick={this.handleOnClick} as={Button} style={{ color: 'white', background: 'transparent', border: 'transparent', outline: 'none' }} eventKey={this.props.name}>\n        <div className=\"row\">\n          <div className=\"col\">\n            {this.props.name}\n          </div>\n          <div className=\"col\" style={{ textAlign: \"right\" }}>\n            {this.state.isToggle?<img className=\"arrow\" src={UpArrow} alt=\"up-arrow\" />:<img className=\"arrow\" src={DowmArrow} alt=\"down-arrow\" />}\n          </div>\n        </div>\n      </Accordion.Toggle>\n      <Accordion.Collapse as={Card.Body} eventKey={this.props.name} style={{ backgroundColor: '#213758', padding: '1%' }}>\n        <div className=\"collapseContent\">{this.props.children}</div>\n      </Accordion.Collapse>\n    </Accordion>)\n  }\n}\n\nexport default CollapsibleButton\n","var cytoscapeStyle = [{\n  selector: 'node',\n  style: {\n    width: '60%',\n    height: '60%',\n    label: 'data(label)',\n    'text-valign': 'center',\n    'background-color': '#8AA626',\n    'font-weight': 'bold',\n    'overlay-opacity': '0'\n  }\n}, {\n  selector: 'node:selected',\n  style: {\n    'border-width': '30%',\n    'border-opacity': '0.3',\n    'border-color': '#8AA626'\n    // 'background-color': 'data(color)'\n  }\n}, {\n  selector: 'node.transparent',\n  style: {\n    'background-color': 'grey',\n    'z-index': '0',\n    'opacity': '0.3'\n\n  }\n}, {\n  selector: 'node.subgraph',\n  style: {\n    display: 'none'\n  }\n}, {\n  selector: 'edge',\n  style: {\n    'line-color': 'data(color)',\n    width: '5%',\n    'z-index': '3',\n    'overlay-opacity': '0',\n    'border':'2px solid red'\n  }\n}, {\n  selector: 'edge.transparent',\n  style: {\n    'line-color': 'grey',\n    'z-index': '0',\n    opacity: '0.3'\n  }\n}, {\n  selector: 'edge.subgraph',\n  style: {\n    display: 'none'\n  }\n}, {\n  selector: 'edge:selected',\n  style: {\n    'z-index': '3'\n  }\n}, {\n  selector: 'node.notReporting',\n  style: {\n    'background-color': '#A0C3D9'\n  }\n}, {\n  selector: 'node.noTunnel',\n  style: {\n    'background-color': '#F2BE22'\n  }\n}, {\n  selector: 'node.noTunnel:selected',\n  style: {\n    'border-width': '30%',\n    'border-opacity': '0.3',\n    'border-color': '#F2BE22'\n  }\n}, {\n  selector: 'edge.static',\n  style: {\n    'line-color': '#F27405'\n  }\n}, {\n  selector: 'edge.onDemand',\n  style: {\n    'line-color': '#F2D680'\n  }\n}]\n\nexport default cytoscapeStyle\n","export default __webpack_public_path__ + \"static/media/static_ic.9eb48595.svg\";","export default __webpack_public_path__ + \"static/media/ondemand_ic.731a442c.svg\";","export default __webpack_public_path__ + \"static/media/connected_ic.b16f1542.svg\";","export default __webpack_public_path__ + \"static/media/no_tunnel_ic.3ededd72.svg\";","export default __webpack_public_path__ + \"static/media/successor_ic.59f3f80a.svg\";","export default __webpack_public_path__ + \"static/media/longdistance_ic.cdc8abdf.svg\";","export default __webpack_public_path__ + \"static/media/not_reporting_ic.6bfaba5c.svg\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport RightPanel from './RightPanel'\nimport Card from 'react-bootstrap/Card'\nimport Cytoscape from 'react-cytoscapejs'\nimport CollapsibleButton from './CollapsibleButton'\nimport Popover from 'react-bootstrap/Popover'\nimport cytoscapeStyle from './cytoscapeStyle.js'\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport static_ic from '../../Images/Icons/static_ic.svg'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport ondemand_ic from '../../Images/Icons/ondemand_ic.svg'\nimport connected_ic from '../../Images/Icons/connected_ic.svg'\nimport no_tunnel_ic from '../../Images/Icons/no_tunnel_ic.svg'\nimport successor_ic from '../../Images/Icons/successor_ic.svg'\nimport longdistance_ic from '../../Images/Icons/longdistance_ic.svg'\nimport not_reporting_ic from '../../Images/Icons/not_reporting_ic.svg'\nimport GoogleMapReact from 'google-map-react'\n\nclass OthersView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      initMinZoom: 0.2,\n      initMaxZoom: 2,\n      setMinZoom: 0.2,\n      setMaxZoom: 2,\n      graphElement: [],\n      dataReady: false,\n      refresh: false,\n      // cytoscape: null,\n      switchToggle: false,\n      infoToggle: true,\n      configToggle: true,\n      nodeDetails: null,\n      linkDetails: null,\n      currentSelectedElement: null,\n      currentView: null\n    }\n  }\n\n  componentDidMount() {\n    // document.getElementById('rightPanelBtn').click()\n    this.renderGraph()\n    //console.log(this.props.topology)\n\n    var perpareSearchElement = new Promise((resolve, reject) => {\n      try {\n        var searchElement = this.props.topology.getAlltopology().map((element) => { return JSON.stringify(element) })\n        resolve(searchElement)\n      } catch (e) {\n        reject(e)\n      }\n    })\n\n    perpareSearchElement.then((searchElement) => {\n      ReactDOM.render(<Typeahead\n        id='searchOverlay'\n        onChange={(selected) => {\n          try {\n            this.cy.elements().getElementById(JSON.parse(selected).data.id).trigger('click')\n            this.cy.elements().getElementById(JSON.parse(selected).data.id).select()\n          } catch (e) {\n            //console.log(e)\n            this.cy.elements().removeClass('transparent')\n            ReactDOM.render(<></>, document.getElementById('rightPanelContent'))\n          }\n        }}\n        labelKey={(option) => { return (`${JSON.parse(option).data.label}`) }}\n        options={searchElement}\n        selected={this.state.selected}\n        selectHintOnEnter\n        placeholder={'select a node or tunnel'}\n        // renderToken={(option) => { return JSON.parse(option).data.label }}\n        renderMenuItemChildren={(option) => {\n          return (\n            <div className='searchResult'>\n              <div className='resultLabel'>\n                <b>{JSON.parse(option).data.label}</b>\n              </div>\n              <small className='resultLabel'>{`ID : ${JSON.parse(option).data.id}`}</small><br />\n            </div>\n          )\n        }}\n      >\n      </Typeahead>, document.getElementById('searchBar'))\n    })\n  }\n\n  renderNodeDetails = () => {\n\n    var sourceNode = this.state.nodeDetails.sourceNode\n    var connectedNodes = this.state.nodeDetails.connectedNodes\n    var coordinate = sourceNode.raw_data[sourceNode.id].geo_coordinate.split(',')\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coordinate[0]},${coordinate[1]}&key=AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs&language=en`)\n      .then(res => res.json()).then((data) => {\n        // //console.log(data)\n        try {\n          return data.results[data.results.length - 1].formatted_address\n        } catch{\n          return '-'\n        }\n      }).then((location) => {\n        var nodeContent = <div>\n\n          <h5>{sourceNode.name}</h5>\n\n          <div className=\"DetailsLabel\">Node ID</div>\n          {sourceNode.id}\n\n          <div className=\"DetailsLabel\">State</div>\n          {sourceNode.state}\n\n          <div className=\"DetailsLabel\">City/State/Country</div>\n          {location}\n          <hr style={{ backgroundColor: '#486186' }} />\n          <br /><br />\n\n          <div id=\"connectedNode\" style={{ overflow: 'auto' }}>\n            {connectedNodes.map(connectedNode => {\n              try {\n                var connectedNodeDetail = this.props.topology.getConnectedNodeDetails(sourceNode.id, connectedNode.data().id)\n                var connectedNodeBtn =\n                  <CollapsibleButton\n                    id={connectedNode.data().id + 'Btn'}\n                    className='connectedNodeBtn'\n                    key={connectedNode.data().id + 'Btn'}\n                    eventKey={connectedNode.data().label}\n                    name={connectedNode.data().label}\n                  >\n                    <div className=\"DetailsLabel\">Node ID</div>\n                    {connectedNode.data().id}\n                    <div className=\"DetailsLabel\">Tunnel ID</div>\n                    {connectedNodeDetail.id}\n                    <div className=\"DetailsLabel\">Interface Name</div>\n                    {connectedNodeDetail.name}\n                    <div className=\"DetailsLabel\">MAC</div>\n                    {connectedNodeDetail.MAC}\n                    <div className=\"DetailsLabel\">State</div>\n                    {connectedNodeDetail.state}\n                    <div className=\"DetailsLabel\">Tunnel Type</div>\n                    {connectedNodeDetail.type}\n                    {/* <div className=\"DetailsLabel\">ICE Connection Type</div>\n                    {connectedNodeDetail.ICEConnectionType} */}\n                    <div className=\"DetailsLabel\">ICE Role</div>\n                    {connectedNodeDetail.stats.IceProperties.role}\n                    <div className=\"DetailsLabel\">Remote Address</div>\n                    {connectedNodeDetail.remoteAddress}\n                    <div className=\"DetailsLabel\">Local Address</div>\n                    {connectedNodeDetail.localAddress}\n                    <div className=\"DetailsLabel\">Latency</div>\n                    {connectedNodeDetail.stats.IceProperties.latency}\n                    <Card.Body className=\"transmissionCard\" >\n                      Sent\n                      <div className=\"DetailsLabel\">Byte Sent</div>\n                      {connectedNodeDetail.stats.byte_sent}\n                      <div className=\"DetailsLabel\">Total Byte Sent</div>\n                      {connectedNodeDetail.stats.total_byte_sent}\n                    </Card.Body>\n\n                    <Card.Body className=\"transmissionCard\">\n                      Received\n                      <div className=\"DetailsLabel\">Byte Received</div>\n                      {connectedNodeDetail.stats.byte_receive}\n                      <div className=\"DetailsLabel\">Total Byte Received</div>\n                      {connectedNodeDetail.stats.total_byte_receive}\n                    </Card.Body>\n\n                  </CollapsibleButton>\n\n                return connectedNodeBtn\n              } catch (e) {\n                //console.log(e)\n                return false\n              }\n            })}\n          </div>\n\n        </div>\n        ReactDOM.render(nodeContent, document.getElementById('rightPanelContent'))\n      })\n  }\n\n  renderLinkDetails = () => {\n    var linkDetails = this.state.linkDetails.linkDetails\n    var sourceNodeDetails = this.state.linkDetails.sourceNodeDetails\n    var targetNodeDetails = this.state.linkDetails.targetNodeDetails\n\n    //console.log(linkDetails);\n    //console.log(sourceNodeDetails);\n    //console.log(targetNodeDetails);\n\n    const srcCoordinate = sourceNodeDetails.raw_data[sourceNodeDetails.id].geo_coordinate.split(',')\n\n    const tgtCoordinate = targetNodeDetails.raw_data[targetNodeDetails.id].geo_coordinate.split(',')\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${srcCoordinate[0]},${srcCoordinate[1]}&key=AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs&language=en`)\n      .then(res => res.json()).then(data => {\n        try {\n          return data.results[data.results.length - 1].formatted_address\n        } catch{\n          return '-'\n        }\n      }).then(sourceLocation => {\n        fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${tgtCoordinate[0]},${tgtCoordinate[1]}&key=AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs&language=en`)\n          .then(res => res.json()).then(data => {\n            try {\n              return data.results[data.results.length - 1].formatted_address\n            } catch{\n              return '-'\n            }\n          }).then(targetLocation => {\n            let sourceNodeColor\n            let targetNodeColor\n            this.cy.elements('nodes').forEach((node) => {\n              if (node.data().id == sourceNodeDetails.id) {\n                sourceNodeColor = node.css('background-color')\n              }\n            })\n            this.cy.elements('nodes').forEach((node) => {\n              if (node.data().id == targetNodeDetails.id) {\n                targetNodeColor = node.css('background-color')\n              }\n            })\n            var linkContent = <div>\n              <h5>{linkDetails.name}</h5>\n\n              <div className=\"row\">\n\n                <div className=\"col-10\" style={{ paddingRight: '0' }}>\n\n                  <CollapsibleButton\n                    id={sourceNodeDetails.id + 'Btn'}\n                    className='sourceNodeBtn'\n                    key={sourceNodeDetails.id + 'Btn'}\n                    eventKey={sourceNodeDetails.id + 'Btn'}\n                    name={sourceNodeDetails.name}\n                    style={{ marginBottom: '2.5%',backgroundColor:sourceNodeColor,border:`solid ${sourceNodeColor}` }}\n                  >\n\n                    <div className=\"DetailsLabel\">Node ID</div>\n                    {sourceNodeDetails.id}\n\n                    <div className=\"DetailsLabel\">State</div>\n                    {sourceNodeDetails.state}\n\n                    <div className=\"DetailsLabel\">City/State/Country</div>\n                    {sourceLocation}\n\n                  </CollapsibleButton>\n\n                  <CollapsibleButton\n                    id={targetNodeDetails.id + 'Btn'}\n                    className='targetNodeBtn'\n                    key={targetNodeDetails.id + 'Btn'}\n                    eventKey={targetNodeDetails.id + 'Btn'}\n                    name={targetNodeDetails.name}\n                    style={{ marginBottom: '2.5%',backgroundColor:targetNodeColor,border:`solid ${targetNodeColor}`}}\n                  >\n\n                    <div className=\"DetailsLabel\">Node ID</div>\n                    {targetNodeDetails.id}\n\n                    <div className=\"DetailsLabel\">State</div>\n                    {targetNodeDetails.state}\n\n                    <div className=\"DetailsLabel\">City/Country</div>\n                    {targetLocation}\n\n                  </CollapsibleButton>\n\n                </div>\n\n                <div className=\"col\" style={{ margin: 'auto', padding: '0', textAlign: 'center' }}>\n                  <button onClick={this.handleSwitch} id=\"switchBtn\" />\n                </div>\n\n              </div>\n              <hr style={{ backgroundColor: '#486186' }} />\n              <div className=\"DetailsLabel\">Tunnel ID</div>\n              {linkDetails.id}\n              <div className=\"DetailsLabel\">Interface Name</div>\n              {linkDetails.name}\n              <div className=\"DetailsLabel\">MAC</div>\n              {linkDetails.MAC}\n              <div className=\"DetailsLabel\">State</div>\n              {linkDetails.State}\n              <div className=\"DetailsLabel\">Tunnel Type</div>\n              {linkDetails.type}\n              {/* <div className=\"DetailsLabel\">ICE Connection Type</div>\n              {linkDetails.ICEConnectionType} */}\n              <div className=\"DetailsLabel\">ICE Role</div>\n              {linkDetails.stats.IceProperties.role}\n              <div className=\"DetailsLabel\">Remote Address</div>\n              {linkDetails.stats.IceProperties.remote_addr}\n              <div className=\"DetailsLabel\">Local Address</div>\n              {linkDetails.stats.IceProperties.local_addr}\n              <div className=\"DetailsLabel\">Latency</div>\n              {linkDetails.stats.IceProperties.latency}\n              <br /><br />\n\n              <Card.Body className=\"transmissionCard\">\n                <div className=\"DetailsLabel\">Byte Sent</div>\n                {linkDetails.stats.byte_sent}\n                <div className=\"DetailsLabel\">Total Byte Sent</div>\n                {linkDetails.stats.total_byte_sent}\n              </Card.Body>\n\n              <Card.Body className=\"transmissionCard\">\n                Received\n                <div className=\"DetailsLabel\">Byte Received</div>\n                {linkDetails.stats.byte_receive}\n                <div className=\"DetailsLabel\">Total Byte Received</div>\n                {linkDetails.stats.total_byte_receive}\n              </Card.Body>\n\n            </div >\n\n            ReactDOM.render(linkContent, document.getElementById('rightPanelContent'))\n          })\n      })\n  }\n\n  handleSwitch = () => {\n    var that = this\n    var promise = new Promise(function (resolve, reject) {\n      try {\n        that.setState(prevState => {\n          return { switchToggle: !prevState.switchToggle }\n        })\n\n        resolve(true)\n      } catch (e) {\n        reject(e)\n      }\n    })\n\n    promise.then(function () {\n      that.swap()\n    }).catch(function (e) {\n\n    })\n  }\n\n  swap = () => {\n    var that = this\n    var linkDetails\n    var promise = new Promise(function (resolve, reject) {\n      try {\n        if (that.state.switchToggle) {\n          linkDetails = that.props.topology.getLinkDetails(that.state.currentSelectedElement.data().target, that.state.currentSelectedElement.data().id)\n        } else {\n          linkDetails = that.props.topology.getLinkDetails(that.state.currentSelectedElement.data().source, that.state.currentSelectedElement.data().id)\n        }\n        resolve(linkDetails)\n      } catch {\n        reject(false)\n      }\n    })\n\n    promise.then(function (linkDetails) {\n      that.setState(prevState => {\n        return { linkDetails: { linkDetails: linkDetails, sourceNodeDetails: prevState.linkDetails.targetNodeDetails, targetNodeDetails: prevState.linkDetails.sourceNodeDetails } }\n      })\n    }).then(function () {\n      that.renderLinkDetails()\n    }).catch(function (e) {\n\n    })\n  }\n\n  setNodeDetails = (node) => {\n    // //console.log(\"setting node \");\n    var that = this\n    var promise = new Promise(function (resolve, reject) {\n      try {\n\n        var sourceNode = that.props.topology.getNodeDetails(node.data().id)\n\n        var connectedNodes = that.cy.elements(node.incomers().union(node.outgoers())).filter((element) => {\n          return element.isNode()\n        })\n\n        that.setState({ nodeDetails: { sourceNode: sourceNode, connectedNodes: connectedNodes } })\n\n        resolve(true)\n      } catch {\n        reject(false)\n      }\n    })\n\n    promise.then(function () {\n      that.renderNodeDetails()\n    }).catch(function () {\n\n    })\n  }\n\n  setLinkDetails = (link) => {\n    var that = this\n    var promise = new Promise(function (resolve, reject) {\n      try {\n        var linkDetails = that.props.topology.getLinkDetails(link.data().source, link.data().id)\n\n        var sourceNode = link.data().source\n\n        var targetNode = link.data().target\n\n        var sourceNodeDetails = that.props.topology.getNodeDetails(link.data().source)\n\n        var targetNodeDetails = that.props.topology.getNodeDetails(link.data().target)\n\n        that.setState({ linkDetails: { linkDetails: linkDetails, sourceNode: sourceNode, targetNode: targetNode, sourceNodeDetails: sourceNodeDetails, targetNodeDetails: targetNodeDetails } })\n\n        resolve(true)\n      } catch {\n        reject(false)\n      }\n    })\n\n    promise.then(function () {\n      that.renderLinkDetails()\n    }).catch(function () {\n\n    })\n  }\n\n  renderGraph = () => {\n    this.setState({ currentView: 'Topology' })\n    ReactDOM.render(<Cytoscape id=\"cy\"\n      cy={(cy) => {\n        this.cy = cy\n\n        this.setState({ cytoscape: cy })\n\n        this.cy.maxZoom(this.state.initMaxZoom)\n        this.cy.minZoom(this.state.initMinZoom)\n        this.cy.zoom(0.8)\n        this.cy.center()\n\n        var that = this\n\n        if (this.state.currentSelectedElement !== null) {\n          if (this.state.currentSelectedElement.isNode()) {\n            var selectedElement = this.cy.elements().filter(node => node.data().id === this.state.currentSelectedElement.data().id).filter(element => { return element.isNode() })\n            var relatedElement = selectedElement.outgoers().union(selectedElement.incomers()).union(selectedElement)\n            var notRelatedElement = this.cy.elements().difference(selectedElement.outgoers().union(selectedElement.incomers())).not(selectedElement)\n            selectedElement.select()\n            relatedElement.removeClass('transparent')\n            notRelatedElement.addClass('transparent')\n          } else if (this.state.currentSelectedElement.isEdge()) {\n            //    //console.log(this.state.currentSelectedElement)\n            var relatedElement2 = this.state.currentSelectedElement.connectedNodes().union(this.state.currentSelectedElement)\n            var notRelatedElement2 = this.cy.elements().difference(this.state.currentSelectedElement.connectedNodes()).not(this.state.currentSelectedElement)\n            // var relatedElement2 = selectedElement.connectedNodes().union(selectedElement);\n            // var notRelatedElement2 = that.cy.elements().difference(selectedElement.connectedNodes()).not(selectedElement);\n            this.state.currentSelectedElement.select()\n            relatedElement2.removeClass('transparent')\n            notRelatedElement2.addClass('transparent')\n          }\n        }\n\n        this.cy.on('click', function (e) {\n          var selectedElement = e.target[0]\n          var relatedElement\n          var notRelatedElement\n          try {\n            // //console.log(e.target[0]===this.cy);\n            if (document.getElementById('rightPanel').hidden === true) {\n              document.getElementById('overlayRightPanelBtn').click()\n            }\n            if (selectedElement.isNode()) {\n              // //console.log(`selected from clicked : ${JSON.stringify(e.target.data())}`);\n              that.setNodeDetails(selectedElement)\n\n              relatedElement = selectedElement.outgoers().union(selectedElement.incomers()).union(selectedElement)\n              notRelatedElement = that.cy.elements().difference(selectedElement.outgoers().union(selectedElement.incomers())).not(selectedElement)\n            } else if (selectedElement.isEdge()) {\n              that.setLinkDetails(selectedElement)\n              relatedElement = selectedElement.connectedNodes().union(selectedElement)\n              notRelatedElement = that.cy.elements().difference(selectedElement.connectedNodes()).not(selectedElement)\n            }\n            if (document.getElementById('viewSelector').value !== 'Subgraph') {\n              relatedElement.removeClass('transparent')\n              notRelatedElement.addClass('transparent')\n            }\n          } catch {\n            // //console.log(e.target[0]===this.cy);\n            if (e.target[0] === this.cy) {\n              // document.getElementById('rightPanelBtn').click()\n              ReactDOM.render(<></>, document.getElementById('rightPanelContent'))\n              that.cy.elements().removeClass('transparent')\n            }\n          } finally {\n            if (e.target[0] !== this.cy) {\n              that.setState({ switchToggle: true, currentSelectedElement: e.target })\n            } else {\n              that.setState({ switchToggle: false, currentSelectedElement: null })\n            }\n          }\n        })\n      }}\n      wheelSensitivity={0.1}\n\n      elements={this.props.topology.getAlltopology()}\n\n      stylesheet={cytoscapeStyle}\n\n      style={{ width: window.innerWidth, height: window.innerHeight }}\n\n      layout={{ name: 'circle' }}\n\n    />, document.getElementById('midArea'))\n\n    ReactDOM.render(<select defaultValue=\"Topology\" onChange={this.handleViewSelector} id=\"viewSelector\" className=\"custom-select\">\n      <option value=\"Topology\">Topology</option>\n      <option value=\"Subgraph\">Subgraph</option>\n      <option value=\"Map\">Map</option>\n      <option value=\"Log\">Log</option>\n      <option value=\"NetworkFlow\">NetworkFlow</option>\n      <option value=\"TunnelUtilization\">TunnelUtilization</option>\n    </select>, document.getElementById('viewBar'))\n  }\n\n  elementFilter = (element, props) => {\n    if (element.group === 'nodes') {\n      return (element.data().label.toLowerCase().indexOf(props.text.toLowerCase()) !== -1 ||\n        element.data().id.toLowerCase().indexOf(props.text.toLowerCase()) !== -1)\n    } else {\n      return (element.data().label.toLowerCase().indexOf(props.text.toLowerCase()) !== -1 ||\n        element.data().id.toLowerCase().indexOf(props.text.toLowerCase()) !== -1)\n    }\n  }\n\n  handleRefresh = () => {\n    this.cy.zoom(0.8)\n    document.getElementById('zoomSlider').value = this.cy.zoom()\n    this.cy.center()\n  }\n\n  zoomIn = () => {\n    var currentZoom = this.cy.zoom()\n    this.cy.zoom(currentZoom + 0.1)\n    document.getElementById('zoomSlider').value = (this.cy.zoom())\n  }\n\n  zoomOut = () => {\n    var currentZoom = this.cy.zoom()\n    this.cy.zoom(currentZoom - 0.1)\n    document.getElementById('zoomSlider').value = (this.cy.zoom())\n  }\n\n  handleZoomSlider = (e) => {\n    this.cy.zoom(parseFloat(e.target.value))\n  }\n\n  handleWheel = (e) => {\n    document.getElementById('zoomSlider').value = (this.cy.zoom())\n  }\n\n  handleSetMinZoom = (e) => {\n    try {\n      this.cy.minZoom(parseFloat(e.target.value))\n      document.getElementById('zoomSlider').min = parseFloat(e.target.value)\n    } finally {\n      if (this.cy.zoom() < parseFloat(e.target.value)) {\n        this.cy.zoom(parseFloat(e.target.value))\n      }\n      this.setState({ setMinZoom: e.target.value })\n    }\n  }\n\n  handleSetMaxZoom = (e) => {\n    try {\n      this.cy.maxZoom(parseFloat(e.target.value))\n      document.getElementById('zoomSlider').max = parseFloat(e.target.value)\n    } finally {\n      if (this.cy.zoom() > parseFloat(e.target.value)) {\n        this.cy.zoom(parseFloat(e.target.value))\n      }\n      this.setState({ setMinZoom: e.target.value })\n    }\n  }\n\n  handleBackToHome = () => {\n    if (window.confirm('Your current process will be loss. Are you sure to go back ?') === true) {\n      window.location.reload(true)\n    }\n  }\n\n  renderSubgraph = () => {\n    var selectedElement = this.state.currentSelectedElement\n    var notRelatedElement\n    if (this.state.currentView !== 'Map') {\n\n      try {\n        if (selectedElement.isNode()) {\n          notRelatedElement = this.cy.elements().difference(selectedElement.outgoers().union(selectedElement.incomers())).not(selectedElement)\n        } else if (selectedElement.isEdge()) {\n          notRelatedElement = this.cy.elements().difference(selectedElement.connectedNodes()).not(selectedElement)\n        }\n        notRelatedElement.addClass('subgraph')\n        this.setState({ currentView: 'Subgraph' })\n      } catch {\n        alert('Please select node or tunnel.')\n        document.getElementById('viewSelector').value = this.state.currentView\n      }\n    } else {\n      alert('Map is not available for this view.')\n      document.getElementById('viewSelector').value = this.state.currentView\n    }\n  }\n\n  renderTopology = () => {\n    document.getElementById('elementBreadcrumb').hidden = false\n    document.getElementById('overlayBreadcrumb').hidden = false\n    document.getElementById('homeBtn').hidden = false\n    document.getElementById('refreshBtn').hidden = false\n    document.getElementById('configBtn').hidden = false\n    document.getElementById('infoBtn').hidden = false\n    document.getElementById('plusBtn').hidden = false\n    document.getElementById('minusBtn').hidden = false\n    document.getElementById('zoomSlider').hidden = false\n    if (this.state.currentView === 'Subgraph') {\n      this.cy.elements().removeClass('subgraph')\n    } else if (this.state.currentView === 'Map') {\n      this.renderGraph()\n    }\n  }\n\n  handleMakerClicked = (node) => {\n    if (this.state.currentSelectedElement.isNode()) {\n      node.trigger('click')\n      document.getElementById(node.data().id + 'Marker').classList.add('selected')\n      this.setState({ switchToggle: false, currentSelectedElement: node })\n    }\n  }\n\n  midpoint = (lat1, lng1, lat2, lng2) => {\n    lat1 = this.deg2rad(lat1)\n    lng1 = this.deg2rad(lng1)\n    lat2 = this.deg2rad(lat2)\n    lng2 = this.deg2rad(lng2)\n\n    var dlng = lng2 - lng1\n    var Bx = Math.cos(lat2) * Math.cos(dlng)\n    var By = Math.cos(lat2) * Math.sin(dlng)\n    var lat3 = Math.atan2(Math.sin(lat1) + Math.sin(lat2),\n      Math.sqrt((Math.cos(lat1) + Bx) * (Math.cos(lat1) + Bx) + By * By))\n    var lng3 = lng1 + Math.atan2(By, (Math.cos(lat1) + Bx))\n\n    return [(lat3 * 180) / Math.PI, (lng3 * 180) / Math.PI]\n  }\n\n  deg2rad = (degrees) => {\n    return degrees * Math.PI / 180\n  };\n\n  hasCoordinate = (node) => {\n    if (node.data('coordinate').split(',')[1]) {\n      return true;\n    }\n    return false;\n  }\n\n  renderMap = () => {\n    var that = this\n    if (this.state.currentSelectedElement !== null) {\n      if (this.state.currentSelectedElement.isEdge()) {\n        var createMapFromEdge = new Promise((resolve, reject) => {\n          try {\n            var selectedElement = this.state.currentSelectedElement\n            var relatedElement = selectedElement.connectedNodes().filter((element) => {\n              return that.hasCoordinate(element)\n            })\n            var unmappedElement = selectedElement.connectedNodes().filter((element) => {\n              return that.hasCoordinate(element) === false\n            })\n            //console.log(selectedElement)\n            // console.log(relatedElement)\n            var centerPoint, map\n            if (relatedElement.length !== 0) {\n              centerPoint = this.midpoint(parseFloat(relatedElement[0].data().coordinate.split(',')[0]), parseFloat(relatedElement[0].data().coordinate.split(',')[1]), parseFloat(relatedElement[1].data().coordinate.split(',')[0]), parseFloat(relatedElement[1].data().coordinate.split(',')[1]))\n\n              map = <GoogleMapReact\n                bootstrapURLKeys={{\n                  key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                  language: 'en'\n                }}\n                center={{ lat: centerPoint[0], lng: centerPoint[1] }}\n                defaultZoom={10}\n              >\n\n                {relatedElement.map(node => {\n\n                  return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker selected\" lat={parseFloat(node.data().coordinate.split(',')[0])} lng={parseFloat(node.data().coordinate.split(',')[1])}>\n                    <label className=\"markerLabel\">\n                      {node.data().label}\n                    </label>\n                  </button>\n                })}\n\n              </GoogleMapReact>\n\n            } else {\n              centerPoint = [parseFloat('15.8700'), parseFloat('100.9925')]\n              map = <GoogleMapReact\n                bootstrapURLKeys={{\n                  key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                  language: 'en'\n                }}\n                center={{ lat: centerPoint[0], lng: centerPoint[1] }}\n                defaultZoom={10}\n              >\n                <Card id=\"non-coordinate-card\">\n                  <Card.Header>\n                    Unmapped nodes.\n                </Card.Header>\n                  <Card.Body>\n                    {unmappedElement.map(node => {\n                      return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker\">\n                        <label className=\"markerLabel\">\n                          {node.data().label}\n                        </label>\n                      </button>\n                    })}\n                  </Card.Body>\n                </Card>\n              </GoogleMapReact>\n\n            }\n            this.setState({ currentView: 'Map' })\n            ReactDOM.render(map, document.getElementById('midArea'))\n            resolve(true)\n          } catch (e) {\n            console.log(e)\n            // alert(\"You have to select a node.\")\n            // document.getElementById(\"viewSelector\").value = this.state.currentView;\n            reject(false)\n          }\n        })\n\n        createMapFromEdge.then(function () {\n          if (that.state.currentSelectedElement !== null) {\n            //console.log(document.getElementById(that.state.currentSelectedElement.data().id + 'Marker'))\n\n            // document.getElementById(that.state.currentSelectedElement.data().source + \"Marker\").classList.add(\"selected\");\n            // document.getElementById(that.state.currentSelectedElement.data().target + \"Marker\").classList.add(\"selected\");\n          }\n        })\n      } else if (this.state.currentSelectedElement.isNode()) {\n        var createMapFromNode = new Promise((resolve, reject) => {\n          try {\n            var selectedElement = this.state.currentSelectedElement\n            var relatedElement = selectedElement.outgoers().union(selectedElement.incomers()).union(selectedElement).filter((element => {\n              return element.isNode() && this.hasCoordinate(element)\n            }))\n            // //console.log(selectedElement.data().coordinate.split(',')[0])\n            // //console.log(relatedElement)\n            var map\n            if (relatedElement.length !== 0) {\n\n              map = <GoogleMapReact\n                bootstrapURLKeys={{\n                  key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                  language: 'en'\n                }}\n                center={{ lat: parseFloat(selectedElement.data().coordinate.split(',')[0]), lng: parseFloat(selectedElement.data().coordinate.split(',')[1]) }}\n                defaultZoom={10}\n              >\n\n                {relatedElement.map(node => {\n                  return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker\" lat={parseFloat(node.data().coordinate.split(',')[0])} lng={parseFloat(node.data().coordinate.split(',')[1])}>\n                    <label className=\"markerLabel\">\n                      {node.data().label}\n                    </label>\n                  </button>\n                })}\n\n              </GoogleMapReact>\n            } else {\n              map = <GoogleMapReact\n                bootstrapURLKeys={{\n                  key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                  language: 'en'\n                }}\n                center={{ lat: parseFloat('15.8700'), lng: parseFloat('100.9925') }}\n                defaultZoom={10}\n              >\n              </GoogleMapReact>\n            }\n            ReactDOM.render(map, document.getElementById('midArea'))\n            this.setState({ currentView: 'Map' })\n            resolve(true)\n          } catch (e) {\n            // alert(\"You have to select a node.\")\n            // document.getElementById(\"viewSelector\").value = this.state.currentView;\n            // console.log(e)\n            reject(false)\n          }\n        })\n\n        createMapFromNode.then(function () {\n          if (that.state.currentSelectedElement !== null) {\n            //console.log(document.getElementById(that.state.currentSelectedElement.data().id + 'Marker'))\n            if (document.getElementById(that.state.currentSelectedElement.data().id + 'Marker') !== null) {\n              document.getElementById(that.state.currentSelectedElement.data().id + 'Marker').classList.add('selected')\n            }\n          }\n        })\n      }\n    } else {\n      alert('Please select some node or tunnel.')\n      document.getElementById('viewSelector').value = this.state.currentView\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.cy != null && this.cy != undefined) {\n      var nodes = this.cy.elements('nodes')\n      nodes.toArray().forEach((node) => {\n        if (node.incomers().length == 0 && node.outgoers().length == 0) {\n          node.addClass('noTunnel')\n        }\n      })\n    }\n\n    if (this.state.currentView === 'Map') {\n      document.getElementById('elementBreadcrumb').hidden = true\n      document.getElementById('overlayBreadcrumb').hidden = true\n      document.getElementById('homeBtn').hidden = true\n      document.getElementById('refreshBtn').hidden = true\n      document.getElementById('configBtn').hidden = true\n      document.getElementById('infoBtn').hidden = true\n      document.getElementById('plusBtn').hidden = true\n      document.getElementById('minusBtn').hidden = true\n      document.getElementById('zoomSlider').hidden = true\n      var selectedElement = this.state.currentSelectedElement\n      if (this.state.currentSelectedElement.isNode()) {\n        try {\n          var nodeRelatedElement = selectedElement.outgoers().union(selectedElement.incomers()).union(selectedElement).filter(element => {\n            return element.isNode() && this.hasCoordinate(element)\n          })\n          //console.log(nodeRelatedElement)\n          var nodeMap\n          if (nodeRelatedElement.length !== 0) {\n\n            nodeMap = <GoogleMapReact\n              bootstrapURLKeys={{\n                key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                language: 'en'\n              }}\n              center={{ lat: parseFloat(selectedElement.data().coordinate.split(',')[0]), lng: parseFloat(selectedElement.data().coordinate.split(',')[1]) }}\n              defaultZoom={8}\n            >\n\n              {nodeRelatedElement.map(node => {\n                if (node.data().id === this.state.currentSelectedElement.data().id) {\n                  return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker selected\" lat={parseFloat(node.data().coordinate.split(',')[0])} lng={parseFloat(node.data().coordinate.split(',')[1])}>\n                    <label className=\"markerLabel\">\n                      {node.data().label}\n                    </label>\n                  </button>\n                } else {\n                  return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker\" lat={parseFloat(node.data().coordinate.split(',')[0])} lng={parseFloat(node.data().coordinate.split(',')[1])}>\n                    <label className=\"markerLabel\">\n                      {node.data().label}\n                    </label>\n                  </button>\n                }\n              })}\n\n            </GoogleMapReact>\n          } else {\n            nodeMap = <GoogleMapReact\n              bootstrapURLKeys={{\n                key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                language: 'en'\n              }}\n              center={{ lat: parseFloat('15.8700'), lng: parseFloat('100.9925') }}\n              defaultZoom={8}\n            >\n            </GoogleMapReact>\n          }\n          // alert('The visualizer can t find any coordinate of connected node.')\n          ReactDOM.render(nodeMap, document.getElementById('midArea'))\n        } catch (e) {\n          //console.log(e)\n          alert('You have to select a node.')\n          document.getElementById('viewSelector').value = this.state.currentView\n        }\n      } else if (this.state.currentSelectedElement.isEdge()) {\n        try {\n          var edgeRelatedElement = selectedElement.connectedNodes().filter((element) => {\n            return this.hasCoordinate(element)\n          })\n          var unmappedElement = selectedElement.connectedNodes().filter((element) => {\n            return this.hasCoordinate(element) === false\n          })\n          //console.log(edgeRelatedElement)\n          var centerPoint, edgeMap\n          if (edgeRelatedElement.length !== 0) {\n\n            centerPoint = this.midpoint(parseFloat(edgeRelatedElement[0].data().coordinate.split(',')[0]), parseFloat(edgeRelatedElement[0].data().coordinate.split(',')[1]), parseFloat(edgeRelatedElement[1].data().coordinate.split(',')[0]), parseFloat(edgeRelatedElement[1].data().coordinate.split(',')[1]))\n            edgeMap = <GoogleMapReact\n              bootstrapURLKeys={{\n                key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                language: 'en'\n              }}\n              center={{ lat: centerPoint[0], lng: centerPoint[1] }}\n              defaultZoom={10}\n            >\n\n              {edgeRelatedElement.map(node => {\n                return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker selected\" lat={parseFloat(node.data().coordinate.split(',')[0])} lng={parseFloat(node.data().coordinate.split(',')[1])}>\n                  <label className=\"markerLabel\">\n                    {node.data().label}\n                  </label>\n                </button>\n              })}\n\n            </GoogleMapReact>\n          } else {\n            centerPoint = [parseFloat('15.8700'), parseFloat('100.9925')]\n            edgeMap = <GoogleMapReact\n              bootstrapURLKeys={{\n                key: 'AIzaSyBjkkk4UyMh4-ihU1B1RR7uGocXpKECJhs',\n                language: 'en'\n              }}\n              center={{ lat: centerPoint[0], lng: centerPoint[1] }}\n              defaultZoom={10}\n            >\n              <Card id=\"non-coordinate-card\">\n                <Card.Header>\n                  Unmapped nodes.\n                  </Card.Header>\n                <Card.Body>\n                  {unmappedElement.map(node => {\n                    return <button onClick={this.handleMakerClicked.bind(this, node)} key={node.data().id + 'Marker'} id={node.data().id + 'Marker'} className=\"nodeMarker\">\n                      <label className=\"markerLabel\">\n                        {node.data().label}\n                      </label>\n                    </button>\n                  })}\n                </Card.Body>\n              </Card>\n            </GoogleMapReact>\n\n\n\n            // alert('The visualizer can t find any coordinate of connected node.')\n          }\n\n          ReactDOM.render(edgeMap, document.getElementById('midArea'))\n        } catch (e) {\n          //console.log(e)\n          // alert(\"You have to select a node.\")\n          // document.getElementById(\"viewSelector\").value = this.state.currentView;\n        }\n      }\n    }\n  }\n\n  handleViewSelector = (e) => {\n    switch (e.target.value) {\n      case 'Subgraph': this.renderSubgraph(); break\n      case 'Topology': this.renderTopology(); break\n      case 'Map': this.renderMap(); break\n\n      default: ;\n    }\n  }\n\n  render() {\n    return <>\n      <div id=\"leftTools\">\n        <button id=\"elementBreadcrumb\" className=\"leftToolsBtn\">\n          <div className=\"breadcrumbLabel\">\n            {this.state.currentSelectedElement !== null ? this.state.currentSelectedElement.isNode() ? 'Node : ' + this.state.currentSelectedElement.data().label : 'Tunnel : ' + this.state.currentSelectedElement.data().label : 'None.'}\n          </div>\n        </button>\n\n        <button id=\"overlayBreadcrumb\" className=\"leftToolsBtn\">\n          <div className=\"breadcrumbLabel\">\n            Overlay : {this.props.overlayName}\n          </div>\n        </button>\n\n        <div>\n          <button onClick={this.handleBackToHome} id=\"homeBtn\" className=\"leftToolsBtn\"></button>\n        </div>\n        <div>\n          <button onClick={this.handleRefresh} id=\"refreshBtn\" className=\"leftToolsBtn\"></button>\n        </div>\n        <div>\n          <OverlayTrigger rootClose={true} trigger=\"click\" placement=\"right\" overlay={\n            <Popover>\n              <Popover.Title as=\"h3\">IPOP Network Visualizer : Legend</Popover.Title>\n              {/* <Card id=\"infoContent\"> */}\n              <Popover.Content id=\"infoContent\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th colSpan={2}>Node</th>\n                      <th colSpan={2}>Tunnel</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td style={{ width: '5%', margin: 'auto' }}><img className=\"node_img\" src={connected_ic} alt=\"connected_node\" /></td>\n                      <td>Connected</td>\n                      <td style={{ width: '15%' }}><img className=\"tunnel_img\" src={longdistance_ic} alt=\"longdistance_tunnel\" /></td>\n                      <td>Long Distance</td>\n                    </tr>\n                    <tr>\n                      <td style={{ width: '5%' }}><img className=\"node_img\" src={not_reporting_ic} alt=\"not_reporting_node\" /></td>\n                      <td>Not Reporting</td>\n                      <td style={{ width: '15%' }}><img className=\"tunnel_img\" src={ondemand_ic} alt=\"ondemand_tunnel\" /></td>\n                      <td>On Demand</td>\n                    </tr>\n                    <tr>\n                      <td style={{ width: '5%' }}><img className=\"node_img\" src={no_tunnel_ic} alt=\"no_tunnel_node\" /></td>\n                      <td>No Tunnels</td>\n                      <td style={{ width: '15%' }}><img className=\"tunnel_img\" src={static_ic} alt=\"static_tunnel\" /></td>\n                      <td>Static</td>\n                    </tr>\n                    <tr>\n                      <td ></td>\n                      <td></td>\n                      <td style={{ width: '15%' }}><img className=\"tunnel_img\" src={successor_ic} alt=\"successor_tnnel\" /></td>\n                      <td>Successor</td>\n                    </tr>\n                  </tbody>\n                </table>\n                {/* </Card> */}\n              </Popover.Content>\n            </Popover>}>\n            <button onClick={this.handleInfoToggle} id=\"infoBtn\" className=\"leftToolsBtn\"></button>\n          </OverlayTrigger>\n        </div>\n        <div>\n          <OverlayTrigger rootClose={true} trigger=\"click\" placement=\"right\" overlay={\n            <Popover>\n              <Popover.Title as=\"h3\">IPOP Network Visualizer : Configure</Popover.Title>\n              <Popover.Content id=\"configContent\">\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <label>Minimun zoom</label>\n                  </div>\n                  <div className=\"col\">\n                    <select defaultValue={this.state.setMinZoom} onChange={this.handleSetMinZoom} id=\"minZoomSelector\" value={this.state.minZoom}>\n                      <option id=\"0.2\">0.2</option>\n                      <option id=\"1\">1</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <label>Maximum zoom</label>\n                  </div>\n                  <div className=\"col\">\n                    <select defaultValue={this.state.setMaxZoom} onChange={this.handleSetMaxZoom} id=\"maxZoomSelector\" value={this.state.maxZoom}>\n                      <option>2</option>\n                      <option>5</option>\n                    </select>\n                  </div>\n                </div>\n              </Popover.Content>\n            </Popover>}>\n            <button onClick={this.handleConfigToggle} id=\"configBtn\" className=\"leftToolsBtn\"></button>\n          </OverlayTrigger>\n        </div>\n        <div>\n          <button onClick={this.zoomIn} id=\"plusBtn\" className=\"leftToolsBtn\"></button>\n        </div>\n        <div>\n          <input id=\"zoomSlider\" onChange={this.handleZoomSlider} type=\"range\" min={this.state.initMinZoom}\n            max={this.state.initMaxZoom} step={0.1} defaultValue={0.8}></input>\n        </div>\n        <div>\n          <button onClick={this.zoomOut} id=\"minusBtn\" className=\"leftToolsBtn\"></button>\n        </div>\n      </div>\n\n      <section onWheel={this.handleWheel} style={{ width: '100vw', height: '100vh' }}>\n        <div id=\"midArea\">\n\n        </div>\n      </section>\n\n      <RightPanel rightPanelTopic=\"Details\"></RightPanel>\n\n    </>\n  }\n}\n\nexport default OthersView\n","export default __webpack_public_path__ + \"static/media/ipop_ic.9a776127.svg\";","import React from 'react'\nimport ipop_ic from '../../Images/Icons/ipop_ic.svg'\n\nclass Header extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggle: true\n    }\n  }\n\n  // toggle right panel\n  handleRightPanelToggle = () => {\n    var rightPanelEvent = new Promise((resolve, reject) => {\n      try {\n        this.setState(prevState => {\n          return { isToggle: !prevState.isToggle }\n        })\n        resolve()\n      } catch (e) {\n        console.log(e)\n      }\n    })\n\n    rightPanelEvent.then(() => {\n      if (this.state.isToggle) {\n        document.getElementById('rightPanel').hidden = false\n      } else {\n        document.getElementById('rightPanel').hidden = true\n      }\n    })\n  }\n\n  render() {\n    return <header id='header' className='row' style={{ padding: '0.2%', margin: '0' }}>\n      <div id='ipopTitle' className='col-2' style={{ margin: '0' }}>\n        <img id='ipopLogo' src={ipop_ic} alt='ipop_ic' />\n        <label id='ipopTitle' style={{ marginTop: '0.5rem', color: 'white' }}>\n          IPOP NETWORK VISUALIZER\n      </label>\n      </div>\n\n      <div id='viewBar' className='col-5'>\n\n      </div>\n\n      <div id='searchBar' className='col-2' style={{ padding: 0, margin: 0 }}>\n        {this.props.children}\n      </div>\n\n      <button onClick={this.handleRightPanelToggle} id=\"rightPanelBtn\" />\n\n    </header>\n  }\n}\n\nexport default Header\n","var config = {\n  \n  ip: 'localhost',\n  port: '3000' //configure same port as server\n}\n\nexport default config\n","export default class Overlays {\n\n  constructor(overlays) {\n    var overlayList = []\n    //Add every overlay from retrieved overlays for a given interval into overlayList\n    overlays.forEach(obj => obj['Overlays'].forEach(overlay => {\n      console.log(overlay)\n      const overlayStr = { name: overlay.OverlayId, numberOfNodes: overlay.NumNodes, numberOfLinks: overlay.NumEdges }\n      overlayList.push(overlayStr)\n    }))\n\n    this.getOverlayList = () => {\n      return overlayList\n    }\n\n    this.getOverlayName = () => {\n      var overlaysName = []\n      this.getOverlayList().forEach(overlay => { overlaysName.push(overlay.name) })\n      return overlaysName\n    }\n\n    this.getOverlay = (overlay) => {\n      return overlayList.find(element => element.name === overlay)\n    }\n\n    this.getNumberOfNodes = (overlay) => {\n      return overlayList.find(element => element.name === overlay).numberOfNodes\n    }\n\n    this.getNumberOfLinks = (overlay) => {\n      return overlayList.find(element => element.name === overlay).numberOfLinks\n    }\n    this.getOverlayDescription = (overlay) => {\n      return \"EVio\"\n    }\n\n\n  }\n}","export default class Topology {\n\n    constructor(nodes, links) {\n        var raw_nodes = nodes\n        var raw_links = links\n        var topology = [];\n\n        this.addNodeElement = (id) => {\n            const nodeDetails = this.getNodeDetails(id)\n            topology.push(JSON.parse(`{\"group\":\"nodes\",\"data\": {\"id\": \"${nodeDetails.id}\",\"label\": \"${nodeDetails.name}\",\"state\":\"\",\"type\":\"\",\"coordinate\":\"${this.getCoordinate(id)}\"}}`));\n        }\n\n        this.getCoordinate = (id) => {\n            try {\n                const lat = raw_nodes[id].geo_coordinate.split(',')[0]\n                const lng = raw_nodes[id].geo_coordinate.split(',')[1]\n                return [lat, lng]\n            } catch (e) {\n                return '-'\n            }\n        }\n\n        this.addLinkElement = (src, id) => {\n            const linkDetails = this.getLinkDetails(src, id)\n\n            var linkColor\n            switch (linkDetails.type) {\n                case 'CETypeILongDistance':\n                    linkColor = '#5E4FA2'\n                    break\n                case 'CETypeLongDistance':\n                    linkColor = '#5E4FA2'\n                    break\n                case 'CETypePredecessor':\n                    linkColor = '#01665E'\n                    break\n                case 'CETypeSuccessor':\n                    linkColor = '#01665E'\n                    break\n                default: break\n            }\n            topology.push(JSON.parse(`{\"group\":\"edges\",\"data\": { \"id\":\"${linkDetails.id}\" ,\"label\":\"${linkDetails.name}\",\"source\": \"${linkDetails.source}\",\"target\": \"${linkDetails.target}\",\"state\":\"\",\"type\":\"${linkDetails.type}\",\"color\":\"${linkColor}\"}}`));\n        }\n\n        this.getAlltopology = () => {\n            return topology\n        }\n\n        this.getNodeDetails = (id) => {\n\n            var nodeDetails = {\n                // \"name\": raw_nodes[id].NodeName,\n                \"name\": raw_nodes[id].node_name,\n                \"id\": id,\n                \"state\": '-',\n                \"raw_data\": raw_nodes\n            }\n\n            return nodeDetails\n        }\n\n        this.getLinkDetails = (src, id) => {\n            var linkDetails = {\n                // \"name\": raw_links[src][id].InterfaceName,\n                \"name\": raw_links[src][id].tap_name,\n                \"id\": id,\n                // \"MAC\": raw_links[src][id].MAC,\n                \"MAC\": raw_links[src][id].mac,\n                // \"state\": raw_links[src][id].State,\n                \"state\": raw_links[src][id].state,\n                // \"type\": raw_links[src][id].Type,\n                \"type\": raw_links[src][id].edge_type,\n                // \"ICEConnectionType\": '-',\n                // \"ICERole\": '-',\n                \"role\": '-',\n                // \"remoteAddress\": '-',\n                // \"remoteAddress\": raw_links[src][id].ChannelProperties.IceProperties.remote_addr,\n                // \"localAddress\": '-',\n                // \"localAddress\": raw_links[src][id].ChannelProperties.IceProperties.local_addr,\n                // \"latency\": '-',\n                // \"latency\": raw_links[src][id].ChannelProperties.IceProperties.latency,\n                // \"stats\": raw_links[src][id].Stats,\n                \"stats\": raw_links[src][id].ChannelProperties,\n                // \"source\":raw_links[src][id]['SrcNodeId'],\n                \"source\": raw_links[src][id]['SrcNodeID'],\n                // \"target\":raw_links[src][id]['TgtNodeId'],\n                \"target\": raw_links[src][id]['TgtNodeID'],\n                \"raw_data\": raw_links\n            }\n\n            return linkDetails\n        }\n\n        this.getConnectedNodeDetails = (src, tgt) => {\n            var connectedNodeDetails\n\n            Object.keys(raw_links[src]).forEach(link => {\n                // if (raw_links[src][link].TgtNodeId === tgt) {\n                if (raw_links[src][link].TgtNodeID === tgt) {\n                    connectedNodeDetails = this.getLinkDetails(src, link)\n                }\n            });\n\n            return connectedNodeDetails\n        }\n\n    }\n}","import React from 'react'\nimport 'react-tippy/dist/tippy.css'\nimport { Spinner } from 'react-bootstrap'\nimport { Tooltip } from 'react-tippy'\nimport RightPanel from './RightPanel'\nimport OthersView from './OthersView'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport CollapsibleButton from './CollapsibleButton'\nimport { Typeahead } from 'react-bootstrap-typeahead'\nimport Header from './Header'\nimport '../../CSS/Main.css'\nimport Config from '../../config'\nimport Overlays from './Overlays.js'\nimport Topology from './Topology.js'\n\nclass OverlaysView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      overlays: null,\n      selectedOverlay: null,\n      topology: null,\n      isToggle: true\n    }\n  }\n\n  componentDidMount() {\n    //var intervalNo = new Date().toISOString().split('.')[0] //TODO : Read the most recent intervalId\n\n    // URL for REST API.\n    var url = 'http://' + Config.ip + ':' + Config.port + '/overlays?interval=100.42'\n    //var url = allowOrigin + 'http://67.58.53.58:5000/IPOP/overlays?interval=2020-04-29T21:28:42&current_state=True'\n\n    console.log(url);\n\n    fetch(url).then(res => res.json())\n      .then((overlays) => {\n        return new Overlays(overlays) // create overlay object that contain all overlays and its details.\n      })\n      .then((overlays) => { this.setState({ overlays: overlays }) }) // set overlay object to overlays state.\n      .catch(() => {\n        //console.log('error has been occered on fetch overlay process.')\n      })\n  }\n\n  // toggle overlay right panel\n  handleRightPanelToggle = () => {\n    var rightPanelEvent = new Promise((resolve, reject) => {\n      try {\n        this.setState(prevState => {\n          return { isToggle: !prevState.isToggle }\n        })\n        resolve()\n      } catch (e) {\n        //console.log(e)\n      }\n    })\n\n    rightPanelEvent.then(() => {\n      if (this.state.isToggle) {\n        document.getElementById('rightPanel').hidden = false\n      } else {\n        document.getElementById('rightPanel').hidden = true\n      }\n    })\n  }\n\n  renderMainContent = () => {\n    if (this.state.overlays !== null) {\n      if (this.state.selectedOverlay !== null) {\n        if (this.state.topology !== null) {\n          return this.renderGraphContent()\n        } else {\n          return <Spinner id='loading' animation='border' variant='info' />\n        }\n      } else {\n        return this.renderOverlaysContent()\n      }\n    } else {\n      return <Spinner id='loading' animation='border' variant='info' />\n    }\n  }\n\n  renderGraphContent = () => {\n    return <OthersView overlayName={this.state.selectedOverlay} topology={this.state.topology} />\n  }\n\n  renderOverlaysContent = () => {\n    const overlays = this.state.overlays.getOverlayName().map((overlay) => {\n      return <Tooltip className='overlayTooltips' sticky={true} key={overlay} duration='500' animation='scale' interactive position='bottom' arrow={true} open={true}\n        html={(<div>{overlay}</div>)}>\n        <button onClick={this.selectOverlay.bind(this, overlay)} id={overlay} className='overlay' />\n      </Tooltip>\n    })\n\n    return <>\n      <div id=\"overlayList\">{overlays}</div>\n      <RightPanel rightPanelTopic={`Overlays (${this.state.overlays.getOverlayList().length})`} >{this.renderRightPanel()}</RightPanel>\n    </>\n  }\n\n  renderRightPanel = () => {\n    return this.renderOverlayBtn()\n  }\n\n  renderOverlayBtn = () => {\n    const overlayBtn = this.state.overlays.getOverlayName().map((overlay) => {\n      return <CollapsibleButton onClick=\"s\" key={overlay + 'Btn'} id={overlay + 'Btn'} name={overlay} className='overlayBtn'>\n        <div>{this.state.overlays.getOverlayDescription(overlay)}<br />Number of nodes : {this.state.overlays.getNumberOfNodes(overlay)}<br />Number of links : {this.state.overlays.getNumberOfLinks(overlay)}</div>\n      </CollapsibleButton>\n    })\n    return overlayBtn\n  }\n\n  selectOverlay = (overlayId) => {\n    this.setState({ selectedOverlay: overlayId })\n\n    var intervalNo = new Date().toISOString().split('.')[0]\n\n    var allowOrigin = 'https://cors-anywhere.herokuapp.com/'\n    // var allowOrigin = ''\n    var nodeURL = allowOrigin + 'http://' + Config.ip + ':' + Config.port + '/IPOP/overlays/' + overlayId + '/nodes?interval=' + intervalNo + '&current_state=True'\n    var linkURL = allowOrigin + 'http://' + Config.ip + ':' + Config.port + '/IPOP/overlays/' + overlayId + '/links?interval=' + intervalNo + '&current_state=True'\n\n    //console.log(nodeURL);\n\n    //console.log(linkURL);\n\n    var topology = null\n\n    try {\n\n      fetch(nodeURL).then(res => res.json()).then(nodesJSON => {\n        //console.log(nodesJSON);\n\n        fetch(linkURL).then(res => res.json()).then(linksJSON => {\n          //console.log(linksJSON);\n\n          topology = new Topology(nodesJSON[overlayId]['current_state'], linksJSON[overlayId]['current_state'])\n\n          var nodes = nodesJSON[overlayId]['current_state']\n\n          Object.keys(nodes).sort().forEach((nodeID) => {\n\n            // graphElement.push(JSON.parse(`{\"group\":\"nodes\",\"data\": {\"id\": \"${nodeID}\",\"label\": \"${nodes[nodeID].NodeName}\",\"state\":\"\",\"type\":\"\"}}`))\n            topology.addNodeElement(nodeID)\n\n            var links = linksJSON[overlayId]['current_state'][nodeID]\n            try {\n\n              Object.keys(links).forEach(linkID => {\n                // graphElement.push(JSON.parse(`{\"group\":\"edges\",\"data\": { \"id\":\"${linkID}\" ,\"label\":\"${links[linkID]['InterfaceName']}\",\"source\": \"${links[linkID]['SrcNodeId']}\",\"target\": \"${links[linkID]['TgtNodeId']}\",\"state\":\"\",\"type\":\"${links[linkID]['Type']}\"}}`))\n                topology.addLinkElement(nodeID, linkID)\n              })\n\n            } catch{\n                console.log(`${nodeID} has no tunnel.`)\n            }\n          })\n\n          return topology\n\n        }).then((topology) => {\n          this.setState({ topology: topology })\n        })\n\n      })\n\n    } catch{\n      // console.log('error has been occered on fetch node and tunnel process.')\n    }\n  }\n\n  render() {\n    return (<div id=\"container\" className=\"container-fluid\" style={{ padding: '0' }} >\n\n      <Header>\n        <Typeahead\n          id=\"searchOverlay\"\n          onChange={(selected) => {\n            try {\n              this.selectOverlay(selected[0])\n            } catch {\n              //console.log('Error has been occured on select search result.')\n            }\n          }}\n          options={this.state.overlays !== null ? this.state.overlays.getOverlayName() : []}\n          selected={this.state.selected}\n          selectHintOnEnter\n          placeholder=\"Search overlay\"\n          renderMenuItemChildren={(option) => {\n            return (\n              <div className=\"searchResult\">\n                <div className=\"resultLabel\">\n                  {option}\n                </div>\n                <small className='resultLabel'>{`Number of nodes :  ${this.state.overlays.getNumberOfNodes(option)} Number of links : ${this.state.overlays.getNumberOfLinks(option)}`}</small><br />\n              </div>\n            )\n          }}\n        >\n        </Typeahead>\n      </Header>\n\n      {/* <button onClick={this.handleRightPanelToggle} id=\"overlayRightPanelBtn\" /> */}\n\n      <div id=\"mainContent\" className=\"row\" style={{ backgroundColor: '#101B2B', color: 'white', margin: 'auto' }}>\n        {this.renderMainContent()}\n      </div>\n\n    </div>)\n  }\n}\n\nexport default OverlaysView","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport OverlaysView from './Components/Common/OverlaysView.js'\n\nfunction App () {\n  return (\n    <OverlaysView />\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css'\nimport App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n        <App />, \ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}